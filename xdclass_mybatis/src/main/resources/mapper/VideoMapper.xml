<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--
 namespace: 名称空间，一般需要保持全局唯一,强烈建议使用对应dao层的全限定类名，
    可以映射 sql语句 到对应的方法名称和参数、返回类型
    mybatis是使用接口动态代理
-->
<mapper namespace="com.edu.online.mapper.VideoMapper">
    <!--sql 片段的使用-->
    <sql id="base_video_filed">
        id,title,summary,cover_img
    </sql>
    <!--
        id 对应 map的方法名  切当前作用域唯一
        resultType 返回的封装类型
        select * from video where id = #{id}
        2. 使用sql片段查询 适用于多出重复的字段
    -->
    <select id="selectById" resultType="com.edu.online.domain.Video">
        select
        <include refid="base_video_filed"/>
        from video where id = #{video_id}
    </select>

    <select id="selectAllByXml" resultType="com.edu.online.domain.Video">
        select * from video
    </select>

    <!--<select id="selectPointAndTitleLike" resultType="com.edu.online.domain.Video">-->
    <select id="selectPointAndTitleLike" resultType="Video">
        select * from video where point = #{point} and title like concat('%',#{title},'%')
    </select>

    <!-- 保存一个视频
            parameterType 入参类型
            useGeneratedKeys 是否使用数据库主键
            keyProperty 主键对应实体字段
            keyColumn 数据库对应的主键字段
            建议指定参数的类型 否可可能会出现错误
    -->
    <insert id="saveVideo" parameterType="com.edu.online.domain.Video" useGeneratedKeys="true" keyProperty="id"
            keyColumn="id">
        INSERT INTO `video`(`title`,`summary`,`cover_img`,`price`,`create_time`,`point`)
        VALUES(#{title,jdbcType=VARCHAR},#{summary,jdbcType=VARCHAR},#{coverImg,jdbcType=VARCHAR},
          #{price,jdbcType=INTEGER}, #{createTime,jdbcType=DATE}, #{point,jdbcType=DOUBLE})
    </insert>

    <!--<insert id="saveVideo" parameterType="com.edu.online.domain.Video" useGeneratedKeys="true" keyProperty="id"-->
    <!--keyColumn="id">-->
    <!--INSERT INTO `video`(`title`,`summary`,`cover_img`,`price`,`create_time`,`point`)-->
    <!--VALUES(#{title},#{summary},#{coverImg},-->
    <!--#{price}, #{createTime}, #{point})-->
    <!--</insert>-->

    <!-- 批量插入
        使用 useGeneratedKeys,keyProperty,keyColumn 可以映射到list对象上
    -->
    <insert id="saveBatchVideo" parameterType="com.edu.online.domain.Video" useGeneratedKeys="true" keyProperty="id"
            keyColumn="id">
        INSERT INTO `video`(`title`,`summary`,`cover_img`,`price`,`create_time`,`point`)
        VALUES
        <!--
            批量插入:
            foreach 循环遍历函数
            item : 单个别名
            index: 角标
            separator : 连接符号
            引用必须制定item.xxx的形式
        -->
        <foreach collection="list" item="video" index="index" separator=",">
            (#{video.title,jdbcType=VARCHAR},#{video.summary,jdbcType=VARCHAR},#{video.coverImg,jdbcType=VARCHAR},
            #{video.price,jdbcType=INTEGER}, #{video.createTime,jdbcType=DATE}, #{video.point,jdbcType=DOUBLE})
        </foreach>
    </insert>

    <!-- updateVideoById 更新-->
    <update id="updateVideoById" parameterType="com.edu.online.domain.Video">
          update video
          set title = #{title},
              summary = #{summary},
              cover_Img = #{coverImg},
              price = #{price},
              point = #{point}
          WHERE id = #{id}
    </update>

    <!-- 部分更新
        使用trim标签 可以去除最后一个,
        使用if test 做判断 决定是否执行
        注意 如果参数为基本类型  会有默认值 例如 int 类型 默认值为 0
        建议使用包装类型或者做相应判断
     -->
    <update id="updateVideoSelective" parameterType="com.edu.online.domain.Video">
        update video
        <trim prefix="set" suffixOverrides=",">
            <if test="title != null">
                title = #{title},
            </if>
            <if test="summary != null">
                summary = #{summary},
            </if>
            <if test="coverImg != null">
                cover_Img = #{coverImg},
            </if>
            <if test="price != 0">
                price = #{price},
            </if>
            <if test="point != 0">
                point = #{point},
            </if>
        </trim>
        WHERE id = #{id}
    </update>

    <!--
    按照条件删除
    为什么要转义字符:
        由于MyBatis的sql写在XML⾥⾯， 有些sql的语法符号和xml⾥⾯的冲突
        ⼤于等于 <![CDATA[ >= ]]>
        ⼩于等于 <![CDATA[ <= ]]>
         如下语句没有报错 但不建议使用
        delete from video where create_time > #{createTime} and price > #{price}
    -->
    <delete id="deleteVideoByCreateTimeAndPrice" parameterType="java.util.Map">
        delete from video where create_time  <![CDATA[ > ]]> #{createTime} and price <![CDATA[ > ]]> #{price}
    </delete>


</mapper>