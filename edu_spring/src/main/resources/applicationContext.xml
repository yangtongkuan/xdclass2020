<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd"
       xmlns:aop="http://www.springframework.org/schema/aop">
    <!--
        id,name bean在spring容器中的唯一标识
        bean标签 id属性：指定Bean的名称，在Bean被别的类依赖时使⽤
        name属性：⽤于指定Bean的别名，如果没有id，也可以⽤name
        class属性：⽤于指定Bean的来源，要创建的Bean的class类，需要全限定名
        spring ioc 控制反转 将原本程序创建的bean实例 交于spring 容器来管理
        核⼼：把创建对象的控制权反转给Spring框架，对象的⽣命周期由Spring统⼀管理
    -->
    <!--
        scope 作用域  默认为singleton 单例的
            常用 singleton 单例
                prototype 多例 调⽤getBean⽅法创建不同的对象，会频繁的创建和销毁对象
            其他 session , request
    -->
    <bean id="video" class="com.edu.online.sp.domain.Video" scope="singleton" init-method="init"
          destroy-method="destory">
        <property name="id" value="9"/>
        <property name="title" value="spring 5.x 新特性"/>
    </bean>

    <!-- spring di 依赖注入
        IOC容器在运⾏期间，动态地将对象某种依赖关系注⼊到对象之中
        depends-on 标明依赖关系 这样video实例会在videoOrder实例之前进行创建
     -->
    <bean id="videoOrder" class="com.edu.online.sp.domain.VideoOrder" depends-on="video">
        <property name="id" value="1"/>
        <property name="outTradeNo" value="20200603230501001"/>
        <property name="video" ref="video"/>
    </bean>

    <!--autowrie的使用
        autowire 默认为no 表示注入
            byName 通过名称注入
            byType 通过类型注入
            constructor 通过构造方法注入
    -->
    <!--<bean id="videoOrder" class="com.edu.online.sp.domain.VideoOrder" autowire="byName">-->
    <!--<property name="id" value="1"/>-->
    <!--<property name="outTradeNo" value="20200603230501001"/>-->
    <!--</bean>-->


    <!--spring 常见两种注入方式
        1. 通过set注入
        2. 通过构造器注入
    -->
    <!--<bean id="video2" class="com.edu.online.sp.domain.Video" scope="prototype">-->
    <!--<property name="id" value="9"/>-->
    <!--<property name="title" value="spring 5.x 新特性"/>-->
    <!--</bean>-->
    <!--<bean id="video2" class="com.edu.online.sp.domain.Video">-->
    <!--<constructor-arg name="title" value="spring 5.x 新版"/>-->
    <!--</bean>-->

    <!--<bean id="video3" class="com.edu.online.sp.domain.Video">-->
    <!--<property name="orderList">-->
    <!--<list>-->
    <!--<value>第一章springboot2.x</value>-->
    <!--<value>第二章mybatis</value>-->
    <!--<value>第三章spring5.x</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--<property name="videoMap">-->
    <!--<map>-->
    <!--<entry key="1" value="第一章springboot2.x"/>-->
    <!--<entry key="2" value="第二章mybatis"/>-->
    <!--</map>-->
    <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash;-->
    <!--bean继承：两个类之间⼤多数的属性都相同，避免重复配置，通过bean标签的parent属性重⽤已-->
    <!--有的Bean元素的配置信息 继承指的是配置信息的复⽤，和Java类的继承没有关系-->
    <!--&ndash;&gt;-->
    <!--<bean id="video1_1" class="com.edu.online.sp.domain.Video1" parent="video3">-->
    <!--<property name="summary" value="http://123.com/test.jpg"/>-->
    <!--</bean>-->

    <!-- bean 初始化处理器
        当多后置处理器同时处理类时, 需要实现ordered 接口来指定执行循序
    -->
    <!--<bean class="com.edu.online.sp.processor.CustomBeanPostProcessor"/>-->
    <!--<bean class="com.edu.online.sp.processor.CustomBeanPostProcessor2"/>-->

    <!-- bean -->
    <bean id="videoService" class="com.edu.online.sp.service.VideoService"/>
    <bean id="timeHandler" class="com.edu.online.sp.aspect.TimeHandlerAspect"/>
    <aop:config>
        <!-- 配置 切面-->
        <aop:aspect id="timeAspect" ref="timeHandler">
            <!-- 配置切点 -->
            <!--<aop:pointcut id="allMethodLogPointCut"-->
            <!--expression="execution(* com.edu.online.sp.service.VideoService.*(..))"/>-->
            <aop:pointcut id="selectivePointCut"
                          expression="execution(* com.edu.online.sp.service.VideoService.save*(..))"/>
            <!-- 配置前置增强 -->
            <!--<aop:before method="beforeMethod" pointcut-ref="allMethodLogPointCut"/>-->
            <!-- 配置后置增强 -->
            <!--<aop:after method="afterMethod" pointcut-ref="allMethodLogPointCut"/>-->
            <!-- 环绕通知 -->
            <aop:around method="aroundMethod" pointcut-ref="selectivePointCut"/>
        </aop:aspect>


    </aop:config>

</beans>